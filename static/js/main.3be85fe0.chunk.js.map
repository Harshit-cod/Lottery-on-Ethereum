{"version":3,"sources":["web3.js","lottery.js","App.js","serviceWorker.js","index.js"],"names":["web3","Web3","window","currentProvider","eth","Contract","App","props","onSubmit","event","a","preventDefault","getAccounts","accounts","state","value","setState","message","lottery","methods","enter","send","from","utils","toWei","onClick","pickWinner","lastWinner","call","manager","countPlayers","currentLotteryAmount","getPlayers","players","length","getBalance","options","address","this","console","log","Container","textAlign","Header","as","content","style","fontSize","fontWeight","marginBottom","marginTop","Label","color","image","Detail","fromWei","Divider","className","horizontal","margin","textTransform","href","Input","label","labelPosition","placeholder","onChange","target","Button","primary","size","Message","positive","maxWidth","maxheight","src","React","Component","Boolean","location","hostname","match","appElement","name","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.3be85fe0.chunk.js","sourcesContent":["import Web3 from 'web3';\n\nconst web3 = new Web3(window.web3.currentProvider); \n// Creating a new copy of Local Web3 and using the provider of the MetaMask. \n\nexport default web3;","// This script is responsible for creating a local copy of the Lottery Contract deployed at address given below and have\n// abi written below.\n\nimport web3 from './web3.js';\n\nconst address = '0xa412259c423262b5262195C64F47A9F4CFFf8a31';\n\nconst abi = [{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pickWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}];\n\n\nexport default new web3.eth.Contract(abi, address); // Creates a copy of the Contract on the browser side with which we\n// can interact with JS.\n\n\n","import React from 'react';\nimport './App.css';\nimport web3 from './web3.js';\nimport lottery from './lottery.js'\nimport { Container, Label, Button, Input, Header, Divider, List, Message, Image, Reveal } from 'semantic-ui-react';\n\nclass App extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {manager: \"\", countPlayers: [], currentLotteryAmount: \"\", value: \"\", message: \"\", lastWinner: \"\"};\n    }\n    /*\n        Some ECMA16 Syntac:\n        state = {\n            manager: \"\"\n        };\n    */\n\n    async componentDidMount(){ // This is a Life-Cycle method which is called when the App component is rendered on the Screen.\n\n        const manager = await lottery.methods.manager().call(); // No need to specify the From Property.\n        const players = await lottery.methods.getPlayers().call();\n        const countPlayers = players.length;\n        const lastWinner = await lottery.methods.lastWinner().call();\n        const currentLotteryAmount = await web3.eth.getBalance(lottery.options.address);\n        this.setState({manager : manager, countPlayers: countPlayers, currentLotteryAmount: currentLotteryAmount, lastWinner: lastWinner});\n        const accounts = await web3.eth.getAccounts();\n        console.log(accounts);\n    }\n\n    onSubmit = async (event) => { // No need to bind the onSubmit function in the render function\n        event.preventDefault();\n        const accounts = await web3.eth.getAccounts();\n        const value = this.state.value;\n        this.setState({message: 'Waiting on Trx Success...'});\n\n        // console.log('ACCOUNTS ARRAY IS HERE:-');\n        // console.log(accounts);\n        await lottery.methods.enter().send({\n            from: accounts[0],\n            value: web3.utils.toWei(this.state.value, 'ether')\n        });\n\n        this.setState({message: 'You have Successfully Entered to the Lottery Contract. Wait For the Results.'});\n    };\n\n    onClick = async (event) => {\n        const accounts = await web3.eth.getAccounts();\n        this.setState({message: \"Declaration of Winner in Progress...\"});\n        await lottery.methods.pickWinner().send({\n            from: accounts[0]\n        });\n        const lastWinner = await lottery.methods.lastWinner().call();\n        this.setState({message: \"And... The WINNER is \" + lastWinner, lastWinner: lastWinner});\n    };\n\n    render(){\n\n     //    let messages = \"\";\n     //  if(this.state.message == \"\"){\n     //      messages =  <Message positive>\n     //                    <Message.Header>{this.state.message}</Message.Header>\n     //                  </Message>;\n     //  }\n     //  else{\n     //      messages=\"No Message to Show...\";\n     //  }\n     //  console.log(\"What is the freaking Msg:-\");\n     // console.log(messages);\n\n\n     return (\n       <Container textAlign='center'>\n            <Header\n                as='h1'\n                content='Lottery Contract'\n                style={{\n                    fontSize: '2em',\n                    fontWeight: 'normal',\n                    marginBottom: '10px',\n                    marginTop: '1em',\n                }}\n            />\n             <div>\n                 <Label as='a' color='purple' image>\n                     {this.state .manager}\n                     <Label.Detail>MANAGER</Label.Detail>\n                 </Label>\n\n                 <Label as='a' color='green' image>\n                     {this.state.countPlayers}\n                     <Label.Detail>Participants</Label.Detail>\n                 </Label>\n\n                 <Label as='a' color='red' image>\n                     {web3.utils.fromWei(this.state.currentLotteryAmount, 'ether')}\n                     <Label.Detail>Ethers</Label.Detail>\n                 </Label>\n             </div>\n\n           <Divider\n                as='h4'\n                className='header'\n                horizontal\n                style={{ margin: '3em 0em', textTransform: 'uppercase' }}\n           >\n               <a href='#'>Want to Try your LUCK...?</a>\n            </Divider>\n\n             <div style={{margin: '20px'}}>\n                 <form onSubmit={this.onSubmit}>\n                     <div>\n                         <label>\n                             <span style={{\n                                    fontSize: '1em',\n                                    fontWeight: 'bold'\n                                }}>\n                                 Amount of Ethers you want to Enter:  </span>\n                         </label>\n                         <Input\n                             label=\"Ethers\"\n                             labelPosition='right'\n                             placeholder=\"Value...\"\n                             value={this.state.value}\n                             onChange={event => this.setState({value: event.target.value})}\n                         />\n                     </div>\n                     <div style={{margin: '10px'}}>\n                         <Button primary>Enter to Lottery!</Button>\n                     </div>\n                 </form>\n             </div>\n\n            <Divider\n                as='h4'\n                className='header'\n                horizontal\n                style={{ margin: '3em 0em', textTransform: 'uppercase' }}\n           >\n               <a href='#'>Ready to pick a Winner...?</a>\n            </Divider>\n\n\n           <div style={{margin: '10px'}}>\n               <Button color='olive' size='huge' onClick={this.onClick}>Pick a WINNER!</Button>\n           </div>\n\n\n           <Divider\n                as='h4'\n                className='header'\n                horizontal\n                style={{ margin: '3em 0em', textTransform: 'uppercase' }}\n           >\n               <a href='#'>Status Messages...</a>\n           </Divider>\n\n\n           <Message positive>\n               <Message.Header>{this.state.message ? this.state.message : 'No Current Messages to Show...'}</Message.Header>\n           </Message>\n\n           <Divider\n                as='h4'\n                className='header'\n                horizontal\n                style={{ margin: '3em 0em', textTransform: 'uppercase' }}\n           >\n               <a href='#'>Last Lottery Winner</a>\n           </Divider>\n           <div style={{textAlign:'center'}}>\n               <p><b>{this.state.lastWinner ? this.state.lastWinner : 'No Winners Yet Declared...'}</b></p>\n               <img style={{maxWidth: '250px', maxheight: '250px' }} src='/images/trophy1.jpg' />\n\n           </div>\n       </Container>\n     );\n\n   }\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst appElement = <App name=\"Shaka Laka\"/>;\nReactDOM.render(appElement, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}